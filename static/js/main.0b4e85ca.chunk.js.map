{"version":3,"sources":["CalcHead.js","Numbers.js","Operations.js","helpers/mathFunctions.js","Calculator.js","index.js"],"names":["CalcHead","props","id","display","result","Numbers","calcNumbers","i","numId","numbersLiteral","push","className","onClick","renderNumbers","Operations","operations","map","operation","opId","opLiteral","arithmeticFunc","specialsFuncs","equals","clear","decimal","add","n1","n2","abstract","multiply","divide","func","Calculator","useState","firstNum","setFirstNum","secondNum","setSecondNum","operator","setOperator","setDisplay","setResult","useEffect","calcAfterResult","op","calcResult","operatorFunc","console","log","getOperatorFunc","Number","specialOperatorsFuncs","includes","concat","num","arithmetics","lastDisplayChar","length","find","arithmetic","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b4e85ca.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function CalcHead(props) {\r\n    return (\r\n        <>\r\n            <div id=\"calc-line\">{props.display}</div>\r\n            <div id=\"display\">{props.result}</div>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Numbers(props) {\r\n    const renderNumbers = () => {\r\n        let calcNumbers = [];\r\n        for (let i = 0; i < 10; i++) {\r\n            const numId = numbersLiteral[i];\r\n            calcNumbers.push(\r\n                <button\r\n                    id={numId}\r\n                    className=\"numbers\"\r\n                    onClick={() => props.onClick(`${i}`)}\r\n                >{i}</button>);\r\n        }\r\n        return calcNumbers;\r\n    }\r\n\r\n    return (\r\n        <>{renderNumbers()}</>\r\n    )\r\n}\r\n\r\nconst numbersLiteral = {\r\n    0: 'zero',\r\n    1: 'one',\r\n    2: 'two',\r\n    3: 'three',\r\n    4: 'four',\r\n    5: 'five',\r\n    6: 'six',\r\n    7: 'seven',\r\n    8: 'eight',\r\n    9: 'nine',\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Operations(props) {\r\n    const renderOperations = (operations) => {\r\n        return operations.map(operation => {\r\n            const opId = opLiteral[operation];\r\n            return <button\r\n                        id={opId}\r\n                        className=\"operations\"\r\n                        onClick={() => props.arithmeticFunc(operation)}\r\n                    >{operation}</button>\r\n        })\r\n    }\r\n\r\n    const renderClear = () => {\r\n        return <button\r\n            id=\"clear\"\r\n            className=\"operations\"\r\n            onClick={() => props.specialsFuncs.clear()}\r\n        >AC</button>\r\n    }\r\n\r\n    const renderDecimal = () => {\r\n        return <button\r\n                    id=\"decimal\"\r\n                    className=\"numbers\"\r\n                    onClick={() => props.specialsFuncs.decimal()}\r\n                >.</button>\r\n    }\r\n\r\n    const renderEquals = () => {\r\n        return <button\r\n                    id=\"equals\"\r\n                    className=\"operations\"\r\n                    onClick={() => props.specialsFuncs.equals()}\r\n                >=</button>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {renderOperations(['+', '-', '*', '/'])}\r\n            {renderEquals()}\r\n            {renderClear()}\r\n            {renderDecimal()}\r\n        </>\r\n    )\r\n}\r\n\r\nconst opLiteral = {\r\n    '+': 'add',\r\n    '-': 'subtract',\r\n    '*': 'multiply',\r\n    '/': 'divide',\r\n}\r\n","function add(n1, n2) {\r\n    return n1 + n2;\r\n}\r\nfunction abstract(n1, n2) {\r\n    return n1 - n2;\r\n}\r\nfunction multiply(n1, n2) {\r\n    return n1 * n2;\r\n}\r\nfunction divide(n1, n2) {\r\n    return n1/n2;\r\n}\r\nfunction equals(n1, n2, func) {\r\n    return func(n1, n2);\r\n}\r\n\r\nexport default function getOperatorFunc(operator) {\r\n    switch (operator) {\r\n        case '+':\r\n            return add;\r\n        case '-':\r\n            return abstract;\r\n        case '*':\r\n            return multiply;\r\n        case '/':\r\n            return divide;\r\n        case '=':\r\n            return equals;\r\n        default:\r\n            console.log(operator);\r\n            break;\r\n    }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CalcHead from './CalcHead';\r\nimport Numbers from './Numbers';\r\nimport Operations from './Operations';\r\nimport getOperatorFunc from './helpers/mathFunctions';\r\n\r\nexport default function Calculator() {\r\n    const [firstNum, setFirstNum] = useState('');\r\n    const [secondNum, setSecondNum] = useState('');\r\n    const [operator, setOperator] = useState('');\r\n    const [display, setDisplay] = useState('');\r\n    const [result, setResult] = useState('0');\r\n\r\n    // Updates calc display when one of the numbers or the operator changes.\r\n    useEffect(() => {\r\n        setDisplay(firstNum+operator+secondNum);\r\n    },[firstNum, secondNum, operator])\r\n\r\n    // Calc reset function for AC button.\r\n    const resetCalc = () => {\r\n        setFirstNum('');\r\n        setSecondNum('');\r\n        setOperator('');\r\n        setResult('0');\r\n        setDisplay('');\r\n    }\r\n\r\n    // Default function for operators. Selects it as opeartor and displays it if relevant.\r\n    const selectOperator = (op) => {\r\n        // Check if clicked when there are no numbers or when operator has already been selected.\r\n        if(secondNum && secondNum !== '-') return calcAfterResult(op);\r\n        if(!firstNum || (secondNum !== '-' && secondNum)) return;\r\n        // Checks if operator is clicked after an operator has already been selected.\r\n        const arithmetics = ['+', '-', '/', '*'];\r\n        const lastDisplayChar = display[display.length-1];\r\n        if(arithmetics.find(arithmetic => arithmetic === lastDisplayChar)){\r\n            if(op === '-') {\r\n                if(arithmetics.find(arithmetic => arithmetic === display[display.length-2])) return\r\n                setSecondNum('-');\r\n                setDisplay(display.concat(op));\r\n                setResult(op);\r\n                return\r\n            }\r\n            else {\r\n                if(arithmetics.find(arithmetic => arithmetic === display[display.length-2])){\r\n                    setDisplay(display.slice(0, -2).concat(op));\r\n                    setSecondNum('');\r\n                }\r\n                else {\r\n                    setDisplay(display.slice(0, -1).concat(op));\r\n                }\r\n            }\r\n        }\r\n        setOperator(op);\r\n        setResult(op);\r\n    }\r\n\r\n    const calcAfterResult = (op) => {\r\n        const calcResult = equals();\r\n        setFirstNum(calcResult);\r\n        setSecondNum('');\r\n        setOperator(op);\r\n    }\r\n\r\n    const equals = () => {\r\n        if(!secondNum || secondNum === '-') return;\r\n        const operatorFunc = getOperatorFunc(operator);\r\n        const calcResult = operatorFunc(Number(firstNum), Number(secondNum));\r\n        setResult(calcResult);\r\n        return calcResult;\r\n    }\r\n\r\n    const decimal = () => {\r\n        if(!operator) {\r\n            if(firstNum && !firstNum.includes('.')) setFirstNum(firstNum.concat('.'));\r\n        }\r\n        else {\r\n            if(secondNum && !secondNum.includes('.')) setSecondNum(secondNum.concat('.'));\r\n        }\r\n    }\r\n\r\n    // Groups togethers functions for any clicked operator other than the basic 4.\r\n    const specialOperatorsFuncs = {\r\n        clear: resetCalc,\r\n        equals,\r\n        decimal\r\n    }\r\n\r\n    const displayNum = (num) => {\r\n        if(operator){\r\n            if(!secondNum && num === '0') return;\r\n            setSecondNum(secondNum.concat(num));\r\n            setResult(secondNum.concat(num));\r\n        }\r\n        else {\r\n            if(!firstNum && num === '0') return;\r\n            setFirstNum(firstNum.concat(num));\r\n            setResult(firstNum.concat(num));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"calculator\">\r\n            <CalcHead display={display} result={result} />\r\n            <Numbers onClick={displayNum} />\r\n            <Operations arithmeticFunc={selectOperator} specialsFuncs={specialOperatorsFuncs} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './Calculator';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}